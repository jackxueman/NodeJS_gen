var async = require('async');
var fs = require('fs');

var WebHDFS = require('./lib/webhdfs');
var WebHDFSProxy = require('webhdfs-proxy');
var WebHDFSProxyMemoryStorage = require('webhdfs-proxy-memory');

var path = '/files/' + Math.random();
var hdfs = WebHDFS.createClient({
    user: process.env.USER,
    port: 45000
});

async.waterfall([
    function setup (next) {
        var opts = {
            path: '/webhdfs/v1',
            http: {
                port: 45000
            }
        };

        WebHDFSProxy.createServer(opts, WebHDFSProxyMemoryStorage, next);
    },

    function writeStream (server, next) {
        var localFileStream = fs.createReadStream(__filename);
        var remoteFileStream = hdfs.createWriteStream(path + '/file-2');

        console.log('paused1', localFileStream.isPaused());
        localFileStream.pipe(remoteFileStream);
        console.log('paused2', localFileStream.isPaused());

        remoteFileStream.on('error',  function (err) {
            console.log('err');
            next(err);
        });

        remoteFileStream.on('finish', function () {
            //console.log(localFileStream);
            next();
        });

        localFileStream.on('readable', function() {
            console.log('can read data', arguments);
        });

        localFileStream.on('data', function(chunk) {
            console.log('did read data', chunk.toString().length);
        });
    }
], function (err) {
    console.log(err && err.stack);
    process.exit(0);
});